// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <stddef.h>

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
// 每个block可以压缩后再存储，目前只有snappy这种压缩形式
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression     = 0x0,
  kSnappyCompression = 0x1
};

// Options to control the behavior of a database (passed to DB::Open)
// 控制DB的行为,Open时传入
struct Options {
  // -------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  // 决定table中key顺序的比较器，默认使用字典式的按字节排序。
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  // 用户得保证每次调用open时使用相同的comparator。
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  // Default: false
  // 如果要打开的Db没有找打，就创建它，默认是false。
  bool create_if_missing;

  // If true, an error is raised if the database already exists.
  // Default: false
  bool error_if_exists;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  // Default: false
  // 如果是true，将会严格检查处理的数据，发现任何错误就提前结束处理。
  // 这可能会导致不可预见的分枝，比如，db的一个记录上有错误就可能导致
  // 很多记录不可读，或者DB无法打开。corruption：腐败，堕落
  bool paranoid_checks;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  // 用来和系统环境交互，包括文件读写，调度后台任务等。
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-NULL, or to a file stored
  // in the same directory as the DB contents if info_log is NULL.
  // Default: NULL
  // 如果不为NULL，则用来记录一些处理的信息和错误，如果为NULL，就用
  // 就记录到和DB内容相同的文件夹里的文件。
  Logger* info_log;

  // -------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  // memtable table的大小，在转为磁盘上的有序文件前，备份在log里。
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  // 大的buffer能提升性能，尤其是在load大块的数据时，由于同时可能有两个
  // write buffer在内存里，所以你可以考虑调整这个参数来控制内存使用率。
  // 但是一个过大的buffer会导致下次打开数据库花费更长的恢复时间。
  // Default: 4MB
  size_t write_buffer_size;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  // DB可以打开的文件数目，如果数据库有一个很大的文件集，可能就需要
  // 增加这个值(每个文件2MB的文件集)
  //
  // Default: 1000
  int max_open_files;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).
  // block的控制，用户数据存储在一系列的block中，block是从磁盘读的最小单元

  // If non-NULL, use the specified cache for blocks.
  // If NULL, leveldb will automatically create and use an 8MB internal cache.
  // non-NULL，使用指定的cache，否则使用一个8MB大小的内部cache。
  // Default: NULL
  Cache* block_cache;

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  // 每个block的近似大小，这里的大小是数据未压缩前的大小，如果启用压缩，
  // 从磁盘上实际读取到的数据单元也许(应该是一定吧)会小一些，这个参数可以
  // 动态修改。
  // Default: 4K
  size_t block_size;

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  // 重启点之间的key的数目，可以动态改变，通常不用改变这个值。
  //
  // Default: 16
  int block_restart_interval;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  // DB的压缩类型，可以动态改变这个参数。默认是使用snappy压缩的。如果数据
  // 压缩率很低的话，snappy能检测到，并且切换到不压缩的模式。所以使用
  // snappy的意义还是很大的。
  CompressionType compression;

  // If non-NULL, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  // 使用filter策略来减少磁盘的读操作，快速判断block里是否有查询的key。
  // 可以使用leveldb实现的NewBloomFilterPolicy，对大部分应用它已经足够好了。
  //
  // Default: NULL
  const FilterPolicy* filter_policy;

  // Create an Options object with default values for all fields.
  Options();
};

// Options that control read operations
struct ReadOptions {
  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  // Default: false
  // 如果是true，所有从storage读的数据都将校验checksums。
  bool verify_checksums;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  // Default: true
  // 是否应该降本次迭代读到的数据保存到cache中，当应用可能会有大块
  // 数据的扫描行为时，最好关掉这个功能，不然每次迭代都会缓存数据，
  // 但是缓存的数据对后面的迭代操作没有任何帮助，还会增加查询cache
  // 的时间。
  bool fill_cache;

  // If "snapshot" is non-NULL, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is NULL, use an impliicit
  // snapshot of the state at the beginning of this read operation.
  // 如果non-NULL，则使用提供的snapshot（它一定属于DB里正在被读的snapshot，
  // 而且没有被释放），如果是NULL，则使用一个隐式snapshot，记录在读操作
  // 开始时DB的状态。
  // 
  // Default: NULL
  const Snapshot* snapshot;

  ReadOptions()
      : verify_checksums(false),
        fill_cache(true),
        snapshot(NULL) {
  }
};

// Options that control write operations
struct WriteOptions {
  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  // 如果为true，写的速度会变慢。只有当写的数据被从操作系统的缓存
  // flush到磁盘上之后，才被认为是写成功。
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  // 如果为false，如果机器crashes，最近写的数据肯能会丢失，注意如果
  // 只是使用leveldb的应用挂掉，不会丢失写的数据。
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  // 换句话说，sync为false时，和write系统调用类似，为true时，和write+fsync
  // 的作用类似。
  // Default: false
  bool sync;

  WriteOptions()
      : sync(false) {
  }
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
